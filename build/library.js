// Generated by CoffeeScript 1.7.1
var AM_BG_COLUMN, AM_U_COLUMN, PM_BG_COLUMN, PM_U_COLUMN, addNewRow, autoAddNewLines, cacheSheetRows, change, change_INSERT_ROW, change_REMOVE_ROW, config, copyTemplate, createSupportSheets, dump, edit, enableTimeTrigger, expireCache, flushLog, formatRow, ignoreSheets, initialize, initializeMenus, isDateCurrent, isIgnoreSheet, isMaxRowCurrent, logSheet, logSheetName, logState, onDaily, onInstall, onOpen, properties, readConfig, registerSpreadsheetTrigger, setupNewRow, setupTimeTrigger, spreadsheet, tdump, testTimeTrigger, trace, truncateLog, verbose,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

createSupportSheets = function(spreadsheet) {
  var i, sheet, sheetName, _i, _len;
  for (_i = 0, _len = ignoreSheets.length; _i < _len; _i++) {
    i = ignoreSheets[_i];
    sheetName = ignoreSheets;
    sheet = spreadsheet.getSheetByName(sheetName);
    if (sheet === null) {
      spreadsheet.insertSheet(sheetName);
    }
  }
};

readConfig = function() {
  var item, k, rawConfig, trace, v, verbose, _i, _len;
  rawConfig = spreadsheet.getSheetByName("Config").getRange("A1:B").getValues();
  for (_i = 0, _len = rawConfig.length; _i < _len; _i++) {
    item = rawConfig[_i];
    k = item[0];
    v = item[1];
    if (k !== "" && v !== "") {
      config[k] = v;
      properties.setProperty("config." + k, v);
    }
  }
  config["init"] = true;
  verbose = config["verbose"];
  trace = config["trace"];
  config['autoAddNewLines'] = true;
  Logger.log("readConfig %s", config);
  flushLog();
};

isIgnoreSheet = function(name) {
  return __indexOf.call(ignoreSheets, name) >= 0;
};

registerSpreadsheetTrigger = function(namespace) {
  var i, prefix, triggers;
  if (spreadsheet !== null) {
    triggers = ScriptApp.getProjectTriggers();
    for (i in triggers) {
      ScriptApp.deleteTrigger(triggers[i]);
    }
    prefix = "";
    if (namespace) {
      prefix = "" + namespace + ".";
    }
    properties.setProperty('namespace', namespace);
    ScriptApp.newTrigger(prefix + "edit").forSpreadsheet(spreadsheet).onEdit().create();
    ScriptApp.newTrigger(prefix + "change").forSpreadsheet(spreadsheet).onChange().create();
    ScriptApp.newTrigger(prefix + "initialize").forSpreadsheet(spreadsheet).onOpen().create();
    if (autoAddNewLines) {
      enableTimeTrigger(namespace);
    }
    dump("triggers %s installed for %s", spreadsheet.getName(), ScriptApp.getProjectTriggers().map(function(item) {
      return item.getHandlerFunction();
    }));
    cacheSheetRows();
  } else {
    dump("spreadsheet was null, no triggers installed");
  }
  flushLog();
};

setupTimeTrigger = function(functionName, namespace) {
  var prefix;
  if (namespace == null) {
    namespace = properties.getProperty('namespace');
  }
  prefix = "";
  if (namespace) {
    prefix = "" + namespace + ".";
  }
  return ScriptApp.newTrigger(prefix + functionName);
};

enableTimeTrigger = function(namespace) {
  setupTimeTrigger("onDaily", namespace).timeBased().atHour(1).everyDays(1).create();
  dump("Enabling time trigger.");
};

testTimeTrigger = function() {
  setupTimeTrigger("onDaily").timeBased().after(1).create();
  dump("Enabling one shot test time trigger.");
};

flushLog = function() {
  if (verbose) {
    logSheet.appendRow([Logger.getLog()]);
    Logger.clear();
  }
};

logState = function() {
  var crows, name, rows, sheet, sheets, sid, _i, _len, _ref, _ref1;
  dump("logging state.");
  sheets = spreadsheet.getSheets();
  for (_i = 0, _len = sheets.length; _i < _len; _i++) {
    sheet = sheets[_i];
    rows = sheet.getMaxRows();
    name = sheet.getName();
    sid = sheet.getSheetId();
    if (isIgnoreSheet(name)) {
      dump("ignore sheet %s:'%s' rows %s.", sid, name, rows);
      continue;
    }
    crows = +properties.getProperty(name);
    dump("sheet %s:'%s' rows %s/%s.", sid, name, crows, rows);
  }
  dump("triggers %s installed for %s", spreadsheet.getName(), ScriptApp.getProjectTriggers().map(function(item) {
    return item.getHandlerFunction();
  }));
  dump("config %s", config);
  dump(properties.getProperty('namespace'));
  sheet = SpreadsheetApp.getActiveSheet();
  if (sheet) {
    dump("active sheet %s", sheet.getName());
    dump("active range %s", (_ref = sheet.getActiveRange()) != null ? _ref.getA1Notation() : void 0);
    dump("active column %s", (_ref1 = sheet.getActiveRange()) != null ? _ref1.getColumn() : void 0);
  } else {
    dump("no active sheet");
  }
  flushLog();
};

truncateLog = function() {
  var rows;
  rows = logSheet.getMaxRows();
  return logSheet.deleteRows(1, rows - 1);
};

copyTemplate = function() {
  var copy, dest, name, r, source, ss, template, year;
  template = 'BGTemplate';
  name = 'Blood Glucose';
  ss = SpreadsheetApp.getActive();
  source = ss.getSheetByName(template);
  year = new Date().getFullYear();
  copy = source.copyTo(ss);
  copy.setName("" + name + " " + year);
  ss.setActiveSheet(copy);
  ss.moveActiveSheet(1);
  r = copy.getMaxRows();
  dest = copy.getRange("A" + r);
  return dest.setValue(new Date());
};

dump = function() {
  if (verbose) {
    Logger.log.apply(Logger, arguments);
  }
};

tdump = function() {
  if (trace) {
    Logger.log.apply(Logger, arguments);
  }
};

setupNewRow = function(range) {
  var dest, destFormat, oldValue, row;
  dest = range;
  row = range.getRow();
  oldValue = dest.getValue();
  if (oldValue === "") {
    destFormat = spreadsheet.getRange("A" + row + ":A");
    formatRow(row);
    dest.setValue(new Date());
    dump("setupNewRow row %s - %s", row, dest.getA1Notation());
  } else {
    dump("FAILED - value already set %s - setupNewRow row %s - %s", oldValue, row, dest.getA1Notation());
  }
  flushLog();
};

formatRow = function(row) {
  var dest, source;
  dest = spreadsheet.getRange("A" + row + ":A");
  source = dest.offset(-1, 0);
  return source.copyTo(dest, {
    formatOnly: true
  });
};

addNewRow = function(sheet) {
  var row;
  sheet.appendRow([new Date()]);
  row = sheet.getMaxRows();
  formatRow(row);
  return dump("addNewRow new and formatted %s", row);
};

isDateCurrent = function(newDate, oldDate) {
  var nd, nm, ny, od, om, oy;
  ny = newDate.getFullYear();
  oy = oldDate.getFullYear();
  nm = newDate.getMonth();
  om = oldDate.getMonth();
  nd = newDate.getDate();
  od = oldDate.getDate();
  return ny < oy || (ny === oy && (nm < om || (nm === om && (nd <= od))));
};

isMaxRowCurrent = function(sheet) {
  var cell, n, t;
  n = new Date();
  cell = "A" + (sheet.getMaxRows());
  t = sheet.getRange(cell).getValue();
  dump("isMaxRowCurrent sheet '%s:%s' dates ['%s', '%s']", sheet.getName(), cell, n, t);
  return isDateCurrent(n, t);
};

expireCache = function() {
  var name, sheet, sheets, _i, _len;
  sheets = spreadsheet.getSheets();
  for (_i = 0, _len = sheets.length; _i < _len; _i++) {
    sheet = sheets[_i];
    name = sheets.getName();
    if (isIgnoreSheet(name)) {
      continue;
    }
    properties.deleteProperty(name);
  }
  dump("cleard cache.");
  flushLog();
};

cacheSheetRows = function() {
  var name, rows, sheet, sheets, sid, _i, _len;
  sheets = spreadsheet.getSheets();
  for (_i = 0, _len = sheets.length; _i < _len; _i++) {
    sheet = sheets[_i];
    rows = sheet.getMaxRows();
    name = sheet.getName();
    sid = sheet.getSheetId();
    if (isIgnoreSheet(name)) {
      continue;
    }
    properties.setProperty(name, rows);
    dump("sheet %s:'%s' rows %s.", sid, name, rows);
  }
  flushLog();
};

initialize = function(e) {
  dump("initialize.");
  readConfig();
  cacheSheetRows();
  initializeMenus(e);
};

initializeMenus = function(e) {
  var menu, namespace, ui;
  namespace = properties.getProperty('namespace');
  ui = SpreadsheetApp.getUi();
  menu = ui.createAddonMenu();
  menu.addItem('Log State', "" + namespace + ".logState").addToUi();
  menu.addItem('Truncate Log', "" + namespace + ".truncateLog").addToUi();
  return menu.addItem('Template to New Year', "" + namespace + ".copyTemplate").addToUi();
};


/*
Event handlers
 */

onInstall = function(namespace) {
  dump("onInstall");
  readConfig();
  registerSpreadsheetTrigger(namespace);
  onOpen();
};


/*
Automatically add new line
 */

onDaily = function() {
  var sheet;
  sheet = ss.getSheets()[0];
  dump("onDaily - examine date on sheet '%s'", sheet.getName());
  if (!isMaxRowCurrent(sheet)) {
    addNewRow(sheet);
  }
  flushLog();
};


/*
Called onOpen
 */

onOpen = function(e) {
  var sheet, ss;
  dump("onOpen. e:'%s'", e);
  initialize(e);
  if (autoAddNewLines) {
    ss = SpreadsheetApp.getActiveSpreadsheet();
    sheet = ss.getSheets()[0];
    dump("onOpen - autoAddNewLines - examine date on sheet '%s'", sheet.getName());
    if (!isMaxRowCurrent(sheet)) {
      addNewRow(sheet);
    }
  }
  flushLog();
};

edit = function(e) {
  var cachedRows, column, note, offset, rows, sheet, sheetName, targetRange;
  sheet = e.source.getActiveSheet();
  sheetName = sheet.getSheetName();
  cachedRows = +properties.getProperty(sheetName);
  rows = sheet.getMaxRows();
  dump("onEdit range %s, name %s, event %s, rows %s, cached %s", e.range.getA1Notation(), sheetName, e, rows, cachedRows);
  if (!isIgnoreSheet(sheetName)) {
    column = e.range.getColumn();
    if (e.value !== null) {
      dump("onEdit - found value, considering column %s.", column);
      if (column === AM_U_COLUMN || column === PM_U_COLUMN) {
        if (column === AM_U_COLUMN) {
          offset = -1;
        }
        if (column === PM_U_COLUMN) {
          offset = 1;
        }
        targetRange = e.range.offset(0, offset);
        if (targetRange.getValue() === "") {
          targetRange.setValue(new Date());
        }
      } else if (column > AM_U_COLUMN && column < PM_U_COLUMN) {
        targetRange = e.range;
        note = targetRange.getNote();
        if (note === "") {
          targetRange.setNote(new Date());
        }
      }
    }
    if (cachedRows === null) {
      cacheSheetRows();
      dump("onEdit - caching rows.");
    } else {
      if (cachedRows < rows) {
        dump("onEdit - inserted, rows increased %s to %s.", cachedRows, rows);
      } else if (rows === cachedRows) {
        dump("onEdit - rows unchanged, %s column %s.", cachedRows, column);
      } else {
        dump("onEdit - rows deleted %s to %s.", cachedRows, rows);
      }
    }
  }
  flushLog();
};

change = function(e) {
  dump("onChange - %s", e);
  if (e.changeType === "INSERT_ROW") {
    change_INSERT_ROW();
  } else if (e.changeType === "REMOVE_ROW") {
    change_REMOVE_ROW();
  }
  flushLog();
};

change_INSERT_ROW = function() {
  var cachedRows, found, name, range, rows, sheet, sid, _i, _len, _ref;
  sheet = null;
  name = null;
  sid = null;
  found = false;
  _ref = spreadsheet.getSheets();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    sheet = _ref[_i];
    rows = sheet.getMaxRows();
    name = sheet.getName();
    sid = sheet.getSheetId();
    if (isIgnoreSheet(name)) {
      dump("onChange INSERT_ROW - ignoring %s.", name);
      continue;
    }
    cachedRows = +properties.getProperty(name);
    tdump("onChange INSERT_ROW " + name + " r " + rows + " c " + cachedRows + ".");
    if ((cachedRows != null) && rows !== cachedRows) {
      properties.setProperty(name, rows);
      found = true;
      break;
    } else {
      dump("onChange INSERT_ROW null cache - sheet %s:'%s' rows %s.", sid, name, cachedRows === null ? rows : void 0);
    }
  }
  if (found) {
    range = sheet.getRange("A" + rows);
    dump("onChange INSERT_ROW - sheet %s:'%s' rows %s (%s) range %s.", sid, name, rows, cachedRows, range.getA1Notation());
    return setupNewRow(range);

    /*
     *disabled in events
    dump "active range %s", sheet.getActiveRange()?.getA1Notation()
    sheet.setActiveRange range
    sheet.setActiveSelection range
    sheet = SpreadsheetApp.getActiveSheet()
    if sheet
      dump "active sheet %s", sheet.getName()
      dump "active range %s", sheet.getActiveRange()?.getA1Notation()
    else
      dump "no active sheet"
     */
  } else {
    return dump("onChange INSERT_ROW - failed to find sheet .");
  }
};

change_REMOVE_ROW = function() {
  var cachedRows, name, rows, sheet, sid, _i, _len, _ref, _results;
  sheet = null;
  name = null;
  sid = null;
  _ref = spreadsheet.getSheets();
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    sheet = _ref[_i];
    rows = sheet.getMaxRows();
    name = sheet.getName();
    sid = sheet.getSheetId();
    if (isIgnoreSheet(name)) {
      continue;
    }
    cachedRows = +properties.getProperty(name);
    if (rows !== cachedRows) {
      properties.setProperty(name, rows);
      dump("onChange REMOVE_ROW cached updated - sheet %s:'%s' rows %s (%s).", sid, name, rows, cachedRows);
      break;
    } else {
      _results.push(dump("onChange REMOVE_ROW unchanged - sheet %s:'%s' rows %s (%s).", sid, name, rows, cachedRows));
    }
  }
  return _results;
};

AM_U_COLUMN = 3;

AM_BG_COLUMN = 4;

PM_U_COLUMN = 28;

PM_BG_COLUMN = AM_BG_COLUMN + 12;

ignoreSheets = ["Log", "Config"];

logSheetName = "Log";

if (typeof SpreadsheetApp !== "undefined" && SpreadsheetApp !== null) {
  spreadsheet = SpreadsheetApp.getActive();
  logSheet = spreadsheet.getSheetByName(logSheetName);
  properties = PropertiesService.getDocumentProperties();
  config = {};
  verbose = properties.getProperty("config.verbose");
  trace = properties.getProperty("config.trace");
  autoAddNewLines = true;
  if (verbose === null || trace === null) {
    readConfig();
  }
} else {
  exports.isDateCurrent = isDateCurrent;
}

//# sourceMappingURL=library.map
